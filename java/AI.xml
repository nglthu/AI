<ROBOTXML VERSION="0.1">

<!-- WORLD REPRESENTATION -->

<WORLD>

<!-- Locations -->
<LOCATION>
   <NAME>g</NAME>
   <PROPERTY>position=(2648.3333, -1737.0)</PROPERTY>
</LOCATION>

<!-- Walls -->
<WALL>
   <START>position=(2629.0, -1721.0)</START>
   <END>position=(2629.3333, -1782.6666)</END>
</WALL>

<WALL>
   <START>position=(2629.0, -1721.0)</START>
   <END>position=(2628.6667, -1683.0)</END>
</WALL>

<WALL>
   <START>position=(2628.6667, -1683.0)</START>
   <END>position=(2560.1667, -1683.3334)</END>
</WALL>

<WALL>
   <START>position=(2560.1667, -1730.6666)</START>
   <END>position=(2560.1667, -1683.3334)</END>
</WALL>

<WALL>
   <START>position=(2592.1667, -1730.0)</START>
   <END>position=(2560.1667, -1730.6666)</END>
</WALL>

<WALL>
   <START>position=(2592.1667, -1730.0)</START>
   <END>position=(2592.0, -1723.3334)</END>
</WALL>

<WALL>
   <START>position=(2560.1667, -1756.3334)</START>
   <END>position=(2560.5, -1781.3334)</END>
</WALL>

<WALL>
   <START>position=(2560.5, -1781.3334)</START>
   <END>position=(2629.3333, -1782.6666)</END>
</WALL>

<WALL>
   <START>position=(2560.1667, -1756.3334)</START>
   <END>position=(2591.5, -1756.0)</END>
</WALL>

<WALL>
   <START>position=(2591.1667, -1766.6666)</START>
   <END>position=(2591.5, -1756.0)</END>
</WALL>

<!-- Robots -->
<ROBOT>
   <PROPERTY>position=(2565.6667, -1740.3334)</PROPERTY>
   <DIRECTION>0.0</DIRECTION>
</ROBOT>

<!-- Plan -->
<PLAN>
   <LOC>g</LOC>
</PLAN>

</WORLD>

<!-- PROLOG SECTION -->
<!-- High Layer Controller -->

<HIGHCONTROLLER>
<LogicProgram>
% High Layer Controller

% assign(goal_pos,Coords,T) is true if we can assign the attribute goal_pos
% with value Coords at time T, ie. the last goal is reached at time T.
assign(goal_pos,Coords,T) <-
		arrived(T) &
		was(to_do,[goto(Loc)|_],_,T) &
		at(Loc,Coords).

% assign(to_do,R,T) is true if we can assign the attribute to_do
% with value R at time T, ie. the last goal is reached at time T.
assign(to_do,R,T) <-
		arrived(T) &
		was(to_do,[_|R],_,T).

% arrived(1.0) is a fact.
arrived(1.0).

</LogicProgram>
</HIGHCONTROLLER>

<!-- Middle Layer Controller -->

<MIDDLECONTROLLER>
<LogicProgram>
% Middle Layer Controller

% goal_direction(G,T) is true if at time T, the direction of the goal
% from the robot's current position is G degrees.
goal_direction(G,T) <-
	was(robot_pos,(X0,Y0),T1,T) &
	was(goal_pos,(X1,Y1),T2,T) &
	direction((X0,Y0),(X1,Y1),G).

% at time 1, there is no previous goal_pos, so just assume it is straight
goal_direction(0,1).

% goal_is(D,T) if the position of the goal is on the D-hand-side of the
% robot's current position at time T.  D is one of {left, right, straight}.
goal_is(left,T) <-
	goal_direction(G,T) &
	was(compass,C,_,T) &
	is_left(G,C).
goal_is(straight,T) <-
	goal_direction(G,T) &
	was(compass,C,_,T) &
	is_straight(G,C).
goal_is(right,T) <-
	goal_direction(G,T) &
	was(compass,C,_,T) &
	is_right(G,C).

% steer(D,T) is true if the robot is to steer in the direction D at time T
% where D is one of {left, right, straight}.
steer(D,T) <-
	whisker_sensor(off,T) &
	goal_is(D,T).
steer(left,T) <-
	whisker_sensor(on,T).

% arrived(T) is true if the robot arrives at the current goal at time T.
arrived(T) <-
	was(goal_pos,Goal_Coords,_,T) &
	was(robot_pos,Robot_Coords,_,T) &
	close_enough(Goal_Coords,Robot_Coords).

% direction((X0,Y0),(X1,Y1),Dir) is true if Dir is the angle, in degrees,
% of the vector from (X0,Y0) to (X1,Y1) with the horizontal.
direction((X0,Y0),(X1,Y1),Dir) <-
	Y0 =< Y1 &
	Dir is 180 * acos( (X1-X0) / sqrt( square(X1-X0) + square(Y1-Y0) ) ) / 3.141592653589793 .
direction((X0,Y0),(X1,Y1),Dir) <-
	Y0 > Y1 &
	Dir is 360 - 180 * acos( (X1-X0) / sqrt( square(X1-X0) + square(Y1-Y0) ) ) / 3.141592653589793 .

% is_left(G,C) is true if the angle G is on the left of the angle C (both in degrees).
is_left(G,C) <-
	((G - C + 540) mod 360) - 180 > 11 .

% is_right(G,C) is true if the angle G is on the right of the angle C (both in degrees).
is_right(G,C) <-
	((G - C + 540) mod 360) - 180 < -11 .

% is_straight(G,C) is true if the angle G is straight ahead of the angle C (both in degrees).
is_straight(G,C) <-
	abs( ((G - C + 540) mod 360) - 180) =< 11 .

% close_enough((X0,Y0),(X1,Y1)) is true if the Euclidean distance between the
% two coordinates is less than 3.0
close_enough((X0,Y0),(X1,Y1)) <-
	abs( square(X1 - X0) +  square(Y1 - Y0) ) < 9.0 .

</LogicProgram>
</MIDDLECONTROLLER>

<!-- Environment -->

<ENVIRONMENT>
<LogicProgram>
% Environment

% whisker_sensor(S,T) is true if the whisker sensor's state is S at time T
% where S is one of {on, off}.
whisker_sensor(on,T) <-
	was(compass,D,_,T) &
	was(robot_pos,(X,Y),_,T) &
	get_whisker_direction(D,30,right,WD) &
	seeblock(X,Y,12,WD).
whisker_sensor(off,T) <-
	was(compass,D,_,T) &
	was(robot_pos,(X,Y),_,T) &
	get_whisker_direction(D,30,right,WD) &
	notseeblock(X,Y,12,WD).

% compass_deriv(A,T) is true if the robot is to turn an angle of A degrees at time T
compass_deriv(0,T) <-
	steer(straight,T).
compass_deriv(-18,T) <-
	steer(right,T).
compass_deriv(18,T) <-
	steer(left,T).

% assign(compass,C,T) is true if the attribute compass is assigned the value C at time T
assign(compass,C,T) <-
	was(compass,C1,T1,T) &
	compass_deriv(DC,T) &
	update_compass(T1,T,DC,C1,C).

% assign(robot_pos,(X,Y),T) is true if the attribute robot_pos is assigned the
% value (X,Y) at time T
assign(robot_pos,(X,Y),T) <-
	was(robot_pos,(X1,Y1),T1,T) &
	x_deriv(DX,T1) &
	y_deriv(DY,T1) &
	update_robot_pos(X1,Y1,DX,DY,T1,T,X,Y).

% get_whisker_direction(D,A,LR,WD) is true if D is the compass value of the	robot
% A is the angle of the whisker relative to the head direction of the robot,
% LR is whether the whisker is on the left or right side of the robot,
% and WD is the compass value (relative to the horizontal) of the whisker direction.
get_whisker_direction(D,A,right,WD) <-
	WD is D - A.
get_whisker_direction(D,A,left,WD) <-
	WD is D + A.

% update_compass(T1,T,DC,C1,C) is true if T1 is the previous time,
% T is the current time, C1 is the previous compass value,
% DC is the change in compass value, and C is the new compass value.
update_compass(T1,T,DC,C1,C) <-
	C is (C1 + DC * (T - T1) + 360) mod 360.

% update_robot_pos(X1,Y1,DX,DY,T1,T,X,Y) is true if T1 is the previous time,
% T is the current time, (X1,Y1) is the robot's position at time T1,
% (DX,DY) is the change in robot position, and (X,Y) is the new robot position.
update_robot_pos(X1,Y1,DX,DY,T1,T,X,Y) <-
	DT is T - T1 &
	X is X1 + DX * DT &
	Y is Y1 + DY * DT.

%x_deriv(DX,T)
x_deriv(DX,T) <-
	was(compass,D,_,T) &
	DX is cos(D*3.14159265358979344/180).

%y_deriv(DY,T)
y_deriv(DY,T) <-
	was(compass,D,_,T) &
	DY is sin(D*3.14159265358979344/180).


</LogicProgram>
</ENVIRONMENT>
</ROBOTXML>
